Method Name,Method Implementation
toStringOf,"   public String toStringOf(Object object) {
     if (object == null) return null;
     if (hasCustomFormatterFor(object)) return customFormat(object);
     if (object instanceof ComparatorBasedComparisonStrategy) return toStringOf((ComparatorBasedComparisonStrategy) object);
     if (object instanceof Calendar) return toStringOf((Calendar) object);
     if (object instanceof Class<?>) return toStringOf((Class<?>) object);
     if (object instanceof Date) return toStringOf((Date) object);
     if (object instanceof Duration) return toStringOf((Duration) object);
     if (object instanceof LocalDate) return toStringOf((LocalDate) object);
     if (object instanceof LocalDateTime) return toStringOf((LocalDateTime) object);
     if (object instanceof OffsetDateTime) return toStringOf((OffsetDateTime) object);
     if (object instanceof ZonedDateTime) return toStringOf((ZonedDateTime) object);
     if (object instanceof LongAdder) return toStringOf((LongAdder) object);
     // if object was a subtype of any atomic type overriding toString, use it as it's more relevant than our generic
     // representation, if that's not the case (e.g. an AtomicReference subclass not overriding String) we use our representation.
     if (isInstanceOfNotOverridingToString(object, AtomicReference.class)) return toStringOf((AtomicReference<?>) object);
     if (isInstanceOfNotOverridingToString(object, AtomicMarkableReference.class))
       return toStringOf((AtomicMarkableReference<?>) object);
     if (isInstanceOfNotOverridingToString(object, AtomicStampedReference.class))
       return toStringOf((AtomicStampedReference<?>) object);
     if (object instanceof AtomicIntegerFieldUpdater) return AtomicIntegerFieldUpdater.class.getSimpleName();
     if (object instanceof AtomicLongFieldUpdater) return AtomicLongFieldUpdater.class.getSimpleName();
     if (object instanceof AtomicReferenceFieldUpdater) return AtomicReferenceFieldUpdater.class.getSimpleName();
     if (object instanceof File) return toStringOf((File) object);
     if (object instanceof Path) return fallbackToStringOf(object);
     if (object instanceof String) return toStringOf((String) object);
     if (object instanceof Character) return toStringOf((Character) object);
     if (object instanceof Comparator) return toStringOf((Comparator<?>) object);
     if (object instanceof SimpleDateFormat) return toStringOf((SimpleDateFormat) object);
     if (object instanceof PredicateDescription) return toStringOf((PredicateDescription) object);
     if (object instanceof Future) return toStringOf((Future<?>) object);
     if (isArray(object)) return formatArray(object);
     if (object instanceof Collection<?>) return smartFormat((Collection<?>) object);
     if (object instanceof Map<?, ?>) return toStringOf((Map<?, ?>) object);
     if (object instanceof Tuple) return toStringOf((Tuple) object);
     if (object instanceof Map.Entry) return toStringOf((Map.Entry<?, ?>) object);
     if (object instanceof Method) return ((Method) object).toGenericString();
     if (object instanceof InsertDelta<?>) return toStringOf((InsertDelta<?>) object);
     if (object instanceof ChangeDelta<?>) return toStringOf((ChangeDelta<?>) object);
     if (object instanceof DeleteDelta<?>) return toStringOf((DeleteDelta<?>) object);
     // Only format Iterables that are not collections and have not overridden toString
     // ex: JsonNode is an Iterable that is best formatted with its own String
     // Path is another example but we can deal with it specifically as it is part of the JDK.
     if (object instanceof Iterable<?> && !hasOverriddenToString(object.getClass())) return smartFormat((Iterable<?>) object);
     if (object instanceof AtomicInteger) return toStringOf((AtomicInteger) object);
     if (object instanceof AtomicBoolean) return toStringOf((AtomicBoolean) object);
     if (object instanceof AtomicLong) return toStringOf((AtomicLong) object);
     if (object instanceof Number) return toStringOf((Number) object);
     if (object instanceof Throwable) return toStringOf((Throwable) object);
     return fallbackToStringOf(object);
   }"
hasOverriddenToString,"   private static boolean hasOverriddenToString(Class<?> clazz) {
     try {
       Class<?> classDeclaringToString = clazz.getMethod(""toString"").getDeclaringClass();
       return !Object.class.equals(classDeclaringToString);
     } catch (NoSuchMethodException | SecurityException e) {
       // NoSuchMethodException should not occur as toString is always defined.
      // if SecurityException occurs, returning false to use our own representation 
       return false;
     }
   }"
